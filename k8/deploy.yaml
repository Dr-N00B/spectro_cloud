apiVersion: v1
kind: Namespace
metadata:
  name: assignment

---
#  Create config map and entry to skip deployment deletion
apiVersion: v1
kind: ConfigMap
metadata:
  name: assignment-config
  namespace: assignment
data:
  skip-deployments: "coredns"

---
# create cluster role to use RBAC. Because default RBAC policies grant scoped permissions to control-plane components, nodes, and controllers, but grant no permissions to service accounts outside the "kube-system" namespace like deployments, pods.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: assignment-role
rules:
- apiGroups: ["","apps"]
  resources: ["deployments","pods","replicasets"]
  verbs: ["get", "list", "watch", "delete"]

---

# Create a new service account to bind the cluster role to. 
apiVersion: v1
kind: ServiceAccount
metadata:
  name: assignment-sa
  namespace: assignment

---
# create binding between cluster role and service account

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: assignment-role-binding
subjects:
- kind: ServiceAccount
  name: assignment-sa
  namespace: assignment
roleRef:
  kind: ClusterRole
  name: assignment-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: assignment-deployment
  namespace: assignment
spec:
  selector:
    matchLabels:
      app: assignment-pod
  replicas: 1
  template:
    metadata:
      labels:
        app: assignment-pod
    spec:
      serviceAccountName: assignment-sa # use custom service account
      containers:
      - name: assignment
        image: arun0110/spectro_cloud:v2.0
        imagePullPolicy: Always
        command: [ "./assignment"]
        args: []
        env:
          - name: SKIP_DEPLOYMENTS
            valueFrom:
              configMapKeyRef:
                name: assignment-config
                key: skip-deployments
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace